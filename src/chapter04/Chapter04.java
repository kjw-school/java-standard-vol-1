package chapter04;

/**
 * 프로그램의 흐름(flow)를 바꾸는 역할을 하는 문장들을 '제어문(control statement)'이라고 한다.<br>
 * 제어문에는 '조건문과 반복문'이 있는데, 조건문은 조건에 따라 다른 문장이 수행되도록 하고, 반복문은 특정 문장들을 반복해서 수행한다.<br>
 * <h1>1. 조건문 - if, switch</h1><br>
 * 조건문은 조건식과 문장을 포함하는 블럭{}으로 구성되어 있으며, 조건식의 연산결과에 따라 실행한 문장이 달라져서 프로그램의 실행흐름을 변경할 수 있다.<br>
 * 조건문은 if문과 switch문, 두 가지가 있으며 주로 if문이 많이 사용된다. 처리할 경우의 수가 많을 때는 if문보다 switch문이 효율적이지만, switch문은 if문보다 제약이 많다.
 */
public class Chapter04 {

	/**
	 * <h5>1.1 if문</h5><br>
	 * if문은 가장 기본적인 조건문이며, 다음과 같이 '조건식'과 '괄호{}'로 이루어져 있다. 'if'의 뜻이 '만일 ~이라면...'이므로<br>
	 * <b>'만일(if) 조건식이 참(true)이면 괄호{} 안의 문장들을 수행하라.'</b>라는 의미로 이해하면 된다.<br>
	 * <pre><code>
	 *     if (조건식) {
	 *         // 조건식이 참(true)일 때 수행될 문장들을 적는다.
	 *     }
	 * </code></pre>
	 */
	class Memo1 {

	}

	/**
	 * <h5>조건식</h5><br>
	 * if문에 사용되는 조건식은 일반적으로 비교연산자와 논리연산자로 구성된다. 자바에서 조건식의 결과는 반드시 true 또는 false이어야 한다.
	 */
	class Memo2 {

	}

	/**
	 * <h5>블럭{}</h5><br>
	 * 괄호{}를 이용해서 여러 문장을 하나의 단위로 묶을 수 있는데, 이것을 '블럭(block)'이라고 한다.<br>
	 * 블럭은'{'로 시작해서, '}'로 끝나는데, '}'다음에 문장의 끝을 의미하는 ';'을 붙이지 않는다는 것에 주의하자.
	 */
	class Memo3 {

	}

	/**
	 * <h5>1.2 if-else문</h5><br>
	 * if문의 변형인 if-else문의 구조는 if문에 'else블럭'이 더 추가되었다. 'else'의 뜻이 '그 밖의 다른'이므로 조건식의 결과가 참이 아닐 때, 즉 거짓일 때 else블럭의 문장을 수행하라는 뜻이다.<br>
	 * <pre><code>
	 *     if(조건식) {
	 *         // 조건식이 참(true)일 때 수행될 문장들을 적는다.
	 *     } else {
	 *         // 조건식이 거짓(false)일 때 수행될 문장들을 적는다.
	 *     }
	 * </code></pre>
	 * <br>
	 * 조건식의 결과에 따라 이 두개의 블럭{}중 어느 한 블럭{}의 내용이 수행되고 전체 if문을 벗어나게 된다.<br>
	 * 두 블럭{}의 내용이 모두 수행되거나, 모두 수행되지 않는 경우는 있을 수 없다.
	 */
	class Memo4 {

	}

	/**
	 * <h5>1.3 if-else if문</h5><br>
	 * if-else문은 두 가지 경우 중 하나가 수행되는 구조인데, 처리해야할 경우의 수가 셋 이상인 경우에는 어떻게 해야 할까?<br>
	 * 그럴 때는 한 문장에 여러 개의 조건식을 쓸 수 있는 'if-else if'문을 사용하면 된다.<br>
	 * <pre><code>
	 *     if(조건식1) {
	 *         // 조건식1의 연산결과가 참일 때 수행될 문장들을 적는다.
	 *     } else if(조건식2) {
	 *         // 조건식2의 연산결과가 참일 때 수행될 문장들을 적는다.
	 *     } else if(조건식3) { // 여러 개의 else if를 사용할 수 있다.
	 *         // 조건식3의 연산결과가 참일 때 수행될 문장들을 적는다.
	 *     } else { // 마지막에는 보통 else블럭으로 끝나며, else 블럭은 생략가능하다.
	 *         // 위의 어느 조건식도 만족하지 않을 때 수행될 문장들을 적는다.
	 *     }
	 * </code></pre><br>
	 * 첫 번째 조건식부터 순서대로 평가해서 결과가 참인 조건식을 만나면, 해당 블럭{}만 수행하고 'if-else if'문 전체를 벗어난다.<br>
	 * 만일 결과가 참인 조건식이 하나도 없으면, 마지막에 있는 else블럭의 문장들이 수행된다.<br>
	 * 그리고 else블럭은 생략이 가능하다. else블럭이 생략되었을 때 if-else if문의 어떤 블럭도 수행되지 않을 수 있다.
	 */
	class Memo5 {

	}

	/**
	 * <h5>1.4 중첩 if문</h5><br>
	 * if문의 블럭 내에 또 다른 if문을 포함시키는 것이 가능한데 이것을 중첩 if문이라고 부르며 중첩의 횟수에는 거의 제한이 없다.<br>
	 * <pre><code>
	 *     if (조건식1) {
	 *         // 조건식1의 연산결과가 true일 때 수행될 문장들을 적는다.
	 *         if (조건식2) {
	 *             // 조건식1과 조건식2가 모두 true일 때 수행될 문장들
	 *         } else {
	 *             // 조건식1이 true이고, 조건식2가 false일 때 수행되는 문장들
	 *         }
	 *     } else {
	 *         // 조건식1이 false일 때 수행되는 문장들
	 *     }
	 * </code></pre>
	 */
	class Memo6 {

	}

	/**
	 * <h5>1.5 switch문</h5><br>
	 * switch문은 단 하나의 조건식으로 많은 경우의 수를 처리할 수 있고, 표현도 간결하므로 알아보기 쉽다.<br>
	 * <pre><code>
	 *              1
	 *     switch (조건식) {
	 *         case 값1:
	 *         		// 조건식의 결과가 값1과 같은 경우 수행될 문장들
	 *         		// ...
	 *         		break;
	 *         2 case 값2:
	 *         	    3 // 조건식의 결과가 값2와 같을 경우 수행될 문장들
	 *         	      // ...
	 *         	    break;
	 *         // ...
	 *         default:
	 *         		// 조건식의 결과와 일치하는 case문이 없을 때 수행될 문장들
	 *     }
	 *     4
	 * </code></pre>
	 * <br>
	 * 1. 조건식을 계산한다.<br>
	 * 2. 조건식의 결과와 일치하는 case문으로 이동한다.<br>
	 * 3. 이후의 문장들을 수행한다.<br>
	 * 4. break문이나 switch문의 끝을 만나면 switch문 전체를 빠져나간다.<br>
	 * 만일 조건식의 결과와 일치하는 case문이 하나도 없는 경우에는 default문으로 이동한다.<br>
	 * switch문에서 break문은 각 case문의 영역을 구분하는 역할을 하는데, 만일 break문을 생략하면 case문 사이의 구분이 없어지므로 다른 break문을 만나거나 switch문 블럭{}의 끝을 만날 때까지 나오는 모든 문장들을 수행한다.<br>
	 * <pre><code>
	 *     switch (level) {
	 *         case 3 :
	 *         		grantDelete(); // 삭제권한을 준다.
	 *         case 2 :
	 *         		grantWrite(); // 쓰기권한을 준다.
	 *         case 1 :
	 *         		grantRead(); // 읽기권한을 준다.
	 *     }
	 * </code></pre>
	 * <br>
	 * 회원제로 운영되는 웹사이트에서 많이 사용될 만한 코드이다.<br>
	 * 로그인한 사용자의 등급(level)을 체크하여, 등급에 맞는 권한을 부여하는 방식으로 되어 있다.<br>
	 * 제일 높은 등급인 3을 가진 사용자는 grantDelete(), grantWrite(), grantRead()가 모두 수행되어 읽기, 쓰기, 삭제 권한까지 모두 갖게 되고, 제일 낮은 등급인 1을 가진 사용자는 읽기 권한만을 갖게 된다.
	 */
	class Memo7 {

	}

	/**
	 * <h5>switch문의 제약조건</h5><br>
	 * switch문의 조건식은 결과값이 반드시 정수이어야 하며, 이 값과 일치하는 case문으로 이동하기 때문에 case문의 값 역시 정수이어야 한다. 그리고 중복되지 않아야 한다.<br>
	 * 게다가 case문의 값은 반드시 상수이어야 한다.<br>
	 * <pre><code>
	 *     switch문의 제약조건
	 *     1. switch문의 조건식 결과는 정수 또는 문자열이어야 한다.
	 *     2. case문의 값은 정수 상수만 가능하며, 중복되지 않아야 한다.
	 * </code></pre>
	 */
	class Memo8 {

	}

	/**
	 * <h5>switch문의 중첩</h5><br>
	 * switch문도 중첩이 가능하다. 주의할 점은 중첩 switch문에서 break문을 빼먹기 쉽다는 것이다.
	 */
	class Memo9 {

	}

}
