package chapter06;

/**
 * <h1>3. 변수와 메서드</h1>
 */
public class Chapter06_3 {

	/**
	 * <p>
	 *     <h5>3.1 선언위치에 따른 변수의 종류</h5><br>
	 *     변수는 클래스변수, 인스턴스 변수, 지역변수 모두 세 종류가 있다. <br>
	 *     변수의 종류를 결정짓는 중요한 요소는 '변수의 선언된 위치' 이므로 변수의 종류를 파악하기 위해서는 변수가 어느 영역에 선언되어있는지를 확인하는 것이 중요하다.<br>
	 *     멤버변수를 제외한 나머지 변수들은 모두 지역변수이며, 멤버변수 중 static이 붙은 것은 클래스변수, 붙지 않은 것은 인스턴스변수이다.<br>
	 * <pre>
	 * class variables{ <- 클래스 영역
	 *     int iv; // 인스턴스 변수
	 *     static int cv; // 클래스 변수(static변수, 공유변수)
	 *     void method(){ <- 메서드 영역
	 *         int lv = 0; // 지역변수
	 *     }
	 * }
	 * </pre>
	 * 		<br>
	 * 		iv와 cv는 클래스 영역에 선언되어있으므로 멤버변수이다. 그 중 cs는 키워드 static과 함께 선언되어 있으므로 클래스 변수이며, iv는 인스턴스 변수이다.<br>
	 * 		lv는 메서드인 method()의 내부, 즉 '메서드 영역'에 선언되어 있으므로 지역변수이다.<br>
	 * 		변수의 종류 | 선언위치 | 생성시기<br>
	 * 		클래스변수(class variable) | 클래스 영역 | 클래스가 메모리에 올라갈 때<br>
	 * 		인스턴스변수(instance variable) | 클래스 영역 | 인스턴스가 생성되었을 때<br>
	 * 		지역변수(local variable) | 클래스 영역 이외의 영역(메서드, 생성자, 초기화 블럭 내부) | 변수 선언문이 수행되었을 때
	 * 		<br>
	 * 		1. 인스턴스변수(instance variable)<br>
	 * 		클래스 영역에 선언되며, 클래스의 인스턴스를 생성할 때 만들어진다. 그렇기 때문에 인스턴스 변수의 값을 읽어 오거나 저장하기 위해서는 먼저 인스턴스를 생성해야 한다.<br>
	 * 		인스턴스는 독립적인 저장공간을 가지므로 서로 다른 값을 가질 수 있다. 인스턴스마다 고유한 상태를 유지해야하는 속성의 경우, 인스턴스변수로 선언한다.<br>
	 * 		2. 클래스변수(class variable)<br>
	 * 		클래스 변수를 선언하는 방법은 인스턴스변수 앞에 static을 붙이기만 하면 된다. 인스턴스마다 독립적인 저장공간을 갖는 인스턴스변수와는 달리,<br>
     *      클래스변수는 모든 인스턴스가 공통된 저장공간(변수)을 공유하게 된다.<br>
	 *      한 클래스의 모든 인스턴스들이 공통적인 값을 유지해야하는 속성의 경우, 클래스변수로 선언해야 한다.<br>
	 *      클래스 변수는 인스턴스변수와 달리 인스턴스를 생성하지 않고도 언제라도 바로 사용할 수 있다는 특징이있으며, '클래스이름.클래스변수'와 같은 형식으로 사용한다.<br>
	 *      클래스가 메모리에 '로딩(loading)'될 때 생성되어 프로그램이 종료될 때 가지 유지되며, public을 앞에 붙이면 같은 프로그램내에서 어디서나 접근할 수 있는 '전역변수(global variable)'의 성격을 갖는다.<br>
	 *      <small>※참조변수의 선언이나 객체의 생성과 같이 클래스의 정보가 필요할 때, 클래스는 메모리에 로딩된다.</small>
	 *      <br>
	 *      3. 지역변수(local variable)<br>
	 *      메서드 내에 선언되어 메서드 내에서만 사용 가능하며, 메서드가 종료되면 소멸되어 사용할 수 없게된다.
	 * </p>
	 */
	class Memo01{}

	/**
	 * <p>
	 *     <h5>3.2 클래스변수와 인스턴스변수</h5><br>
	 * </p>
	 */
	class Memo02{}
	
}
