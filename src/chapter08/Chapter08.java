package chapter08;

/**
 * <h1>8. 예외처리 exception handling</h1>
 */
public class Chapter08 {

	/**
	 * <h1>1. 예외처리(exception handling)</h1><br>
	 * <h5>1.1 프로그램 오류</h5><br>
	 * 프로그램이 실행 중 어떤 원인에 의해서 오작동을 하거나 비정상적으로 종료되는 경우가 있다. <br>
	 * 이러한 결과를 초래하는 원인을 프로그램 에러 또는 오류라고 한다.<br>
	 * 이를 발생시점에 따라 '컴파일 에러(compile-time error)' 와 '런타임 에러(runtime error)'로 나눌 수 있는데,<br>
	 * 글자 그대로 '컴파일 에러'는 컴파일 할 때 발생하는 에러이고 프로그램의 실행도중에 발생하는 에러를 '런타임 에러'라고 한다.<br>
	 * 이 외에도 '논리적 에러(logical error)'가 있는데, 컴파일도 잘되고 실행도 잘되지만 의도한 것과 다르게 동작하는 것을 말한다.<br>
	 * <pre><code>
	 *     컴파일 에러 - 컴파일 시에 발생하는 에러
	 *     런타임 에러 - 실행 시에 발생하는 에러
	 *     논리적 에러 - 실행은 되지만, 의도와 다르게 동작하는 것
	 * </code></pre>
	 * <br>
	 * 소스코드를 컴파일 하면 컴파일러가 소스코드(*.java)에 대해 오타나 잘못된 구문, 자료형 체크 등의 기본적인 검사를 수행하여 오류가 있는지를 알려 준다.<br>
	 * 컴파일러가 알려 준 에러들을 모두 수정해서 컴파일을 성공적으로 마치고 나면, 클래스 파일(*.class)이 생성되고, 생성된 클래스 파일을 실행할 수 있게 되는 것이다.<br>
	 * 컴파일을 에러없이 성공적으로 마쳤다고 해서 프로그램의 실행 시에도 에러가 발생하지 않는 것은 아니다.<br>
	 * 컴파일러가 소스코드의 기본적인 사항은 컴파일 시에 모두 걸러 줄 수는 있지만, 실행도중에 발생할 수 있는 잠재적인 오류까지 검사할 수 없기 떄문에 컴파일은 잘되었어도 실행 중에 에러에 의해서 잘못된 결과를 얻거나 프로그램이 비정상적으로 종료될 수 있다.<br>
	 * 런타임 에러를 방지하기 위해서는 프로그램의 실행도중 발생할 수 잇는 모든 경우의 수를 고려하여 이에 대한 대비를 하는 것이 필요하다.<br>
	 * 자바에서는 실행 시(runtime)발생할 수 있는 프로그램 오류를 '에러(error)'와 '예외(exception)', 두 가지로 구분하였다.<br>
	 * 에러는 메모리 부족(OutOfMemoryError)이나 스택오버플로우(StackOverflowError)와 같이 일단 발생하면 복구할 수 없는 심각한 오류이고, 예외는 발생하더라도 수습될 수 있는 비교적 덜 심각한 것이다.<br>
	 * <pre><code>
	 *     에러(error) - 프로그램 코드에 의해서 수습될 수 없는 심각한 오류
	 *     예외(exception) - 프로그램 코드에 의해서 수습될 수 잇는 다소 미약한 오류
	 * </code></pre>
	 */
	class Memo1 {

	}

	/**
	 * <h5>1.2 예외 클래스의 계층구조</h5><br>
	 * 자바에서는 실행 시 발생할 수 있는 오류(Exception과 Error)를 클래스로 정의하였다.<br>
	 * 모든 클래스의 조상은 Object 클래스이므로 Exception과 Error 클래스 역시 Object 클래스의 자손들이다.<br>
	 * 모든 예외의 최고 조상은 Exception 클래스이다.<br>
	 * RuntimeException 클래스들은 주로 프로그래머의 실수에 의해서 발생될 수 있는 예외들로 자바의 프로그래밍 요소들과 관계가 깊다.<br>
	 * Exception 클래스들은 주로 외부의 영향으로 발생할 수 있는 것들로서, 프로그램의 사용자들의 동작에 의해서 발생하는 경우가 많다.<br>
	 * <pre><code>
	 *     Exception 클래스들 - 사용자의 실수와 같은 외적인 요인에 의해 발생하는 예외
	 *     RuntimeException 클래스들 - 프로그래머의 실수로 발생하는 예외
	 * </code></pre>
	 */
	class Memo2 {

	}

	/**
	 * <h5>1.3 예외처리하기 - try-catch문</h5><br>
	 * 프로그램의 실행도중에 발생하는 에러는 어쩔 수 없지만, 예외는 프로그래머가 이에 대한 처리를 미리 해주어야 한다.<br>
	 * 예외처리(exception handling)란, 프로그램 실행 시 발생할 수 있는 예기치 못한 예외의 발생에 대비한 코드를 작성하는 것이며, 예외처리의 목적은 예외의 발생으로 인한 실행 중인 프로그램의 갑작스런 비정상 종료를 막고, 정상적인 실행상태를 유지할 수 있도록 하는 것이다.<br>
	 * <pre><code>
	 *     예외처리(exception handling)의
	 *     		정의 - 프로그램 실행 시 발생할 수 있는 예외에 대비한 코드를 작성하는 것
	 *     		목적 - 프로그램의 비정상 종료를 막고, 정상적인 실행상태를 유지하는 것
	 * </code></pre>
	 * <br>
	 *<small>※ 에러와 예외는 모두 실행 시(runtime) 발생하는 오류이다.</small><br>
	 * 발생한 예외를 처리하지 못하면, 프로그램은 비정상적으로 종료되며, 처리되지 못한 예외(uncaught exception)는 JVM의 '예외처리기(UncaughtExceptionHandler)'가 받아서 예외의 원인을 화면에 출력한다.<br>
	 * <pre><code>
	 *     try {
	 *         // 예외가 발생할 가능성이 있는 문장들을 넣는다.
	 *     } catch(Exception1 e1) {
	 *         // Exception1이 발생했을 경우, 이를 처리하기 위한 문장을 적는다.
	 *     } catch(Exception2 e2) {
	 *         // Exception2가 발생햇을 경우, 이를 처리하기 위한 문장을 적는다.
	 *     } catch(ExceptionN eN) {
	 *         // ExceptionN이 발생했을 경우, 이를 처리하기 위한 문장을 적는다.
	 *     }
	 * </code></pre>
	 * <br>
	 * 하나의 try블럭 다음에는 여러 종류의 예외를 처리할 수 있도록 하나 이상의 catch블럭이 올 수 있으며, 이 중 발생한 예외의 종류와 일치하는 단 한개의 catch블럭만 수행된다<br>
	 * 발생한 예외의 종류와 일치하는 catch블럭이 없으면 예외는 처리되지 않는다.<br>
	 * <small>※ if문과 달리, try블럭이나 catch블럭 내에 포함된 문장이 하나뿐이어도 괄호{}를 생략할 수 없다.</small><br>
	 * 하나의 메서드 내에 여러 개의 try-catch문이 사용될 수 있으며, try블럭 또는 catch블럭에 또 다른 try-catch문이 포함될 수 있다.<br>
	 * catch블럭 내의 코드에서도 예외가 발생할 수 있기 때문이다. catch블럭의 괄호 내에 선언된 변수는 catch블럭 내에서만 유효하기 때문이다.<br>
	 * ArithmeticException은 산술연산과정에서 오류가 있을 때 발생하는 예외이며, 정수는 0으로 나누는 것이 금지되어있기 때문에 발생한다. 실수를 0으로 나누는 것은 금지되어있지 않으며 예외가 발생하지 않는다.
	 */
	class Memo3 {

	}

	/**
	 * <h5>1.4 try-catch문에서의 흐름</h5><br>
	 */
	class Memo4 {

	}

}
