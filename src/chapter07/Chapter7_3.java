package chapter07;

/**
 * <h1>3. package와 import</h1>
 */
public class Chapter7_3 {

	/**
	 * <h5>3.1 패키지(package)</h5><br>
	 * 패키지란, 클래스의 묶음이다. 패키지에는 클래스 또는 인터페이스를 포함시킬 수 있으며, 서로 관련된 클래스들끼리 그룹 단위로 묶어 놓음으로써 클래스를 효율적으로 관리할 수 있다.<br>
	 * 같은 이름의 클래스 일지라도 서로 다른 패키지에 존재하는 것이 가능하므로, 자신만의 패키지 체계를 유지함으로써 다른 개발자가 개발한 클래스 라이브러리의 클래스와 이름이 충돌하는 것을 피할 수 있다.<br>
	 * 지금까지는 단순히 클래스 이름으로만 클래스를 구분 했지만, 사실 클래스의 실제 이름(full name)은 패키지명을 포함한 것이다.<br>
	 * <b>클래스가 물리적으로 하나의 클래스파일(.class)인 것과 같이 패키지는 물리적으로 하나의 디렉토리이다.</b><br>
	 * <b>- 하나의 소스파일에는 첫 번째 문장으로 단 한번의 패키지 선언만을 허용한다.</b><br>
	 * <b>- 모든 클래스는 반드시 하나의 패키지에 속해야 한다.</b><br>
	 * <b>- 패키지는 점(.)을 구분자로 하여 계층구조로 구성할 수 있다.</b><br>
	 * <b>- 패키지는 물리적으로 클래스 파일(.class)을 포함하는 하나의 디렉토리이다.</b>
	 */
	class Memo1 {

	}

	/**
	 * <h5>3.2 패키지의 선언</h5><br>
	 * 패키지를 선언하는 것은 아주 간단하다. 클래스나 인터페이스의 소스파일(.java)의 맨 위에 다음과 같이 한 줄만 적어주면 된다.<br>
	 * <b>package 패키지명;</b><br>
	 * 패키지 선언문은 반드시 소스파일에서 주석과 공백을 제외한 첫 번째 문장이어야 하며, 하나의 소스파일에 단 한번만 선언될 수 있다.<br>
	 * 해당 소스파일에 포함된 모든 클래스나 인터페이스는 선언된 패키지에 속하게 된다.<br>
	 * 패키지명은 대소문자를 모두 허용하지만, 클래스명과 쉽게 구분하기 위해서 소문자로 하는 것을 원칙으로 하고 있다.<br>
	 * 모든 클래스는 반드시 하나의 패키지에 포함되어야 한다고 했다. 그럼에도 불구하고 지금까지 소스파일을 작성할 때 패키지를 선언하지 않고도 아무런 문제가 없었던 이유는 자바에서 기본적으로 제공하는 '이름없는 패키지(unnamed package)' 때문이다.<br>
	 * 소스파일에 자신이 속한 패키지를 지정하지 않은 클래스는 자동적으로 '이름 없는 패키지'에 속하게 된다. 결국 패키지를 지정하지 않는 모든 클래스들은 같은 패키지에 속하는셈이다.<br>
	 * 패키지의 루트 디렉토리를 클래스패스(classpath)에 포함시켜야 한다.<br>
	 * 루트 디렉토리는 디렉토리 'com'의 상위 디렉토리, 이 디렉토리를 클래스패스에 포함시켜야만 실행 시 JVM이 클래스를 찾을 수 있다.<br>
	 * <small>※클래스패스(classpath)는 컴파일러(javac.exe)나 JVM 등이 클래스의 위치를 찾는데 사용되는 경로이다.</small><br>
	 * 윈도우즈에서는 '제어판-시스템-고급 시스템 설정-환경 변수-새로 만들기'에서 변수이름에 'CLASSPATH'를 입력하고 변수 값에는 '.;c:\jdk.1.8\work'를 입력한다.<br>
	 * ';'를 구분자로 하여 여러 개의 경로를 클래스패스에 지정할 수 있으며, 맨 앞에 '.;'를 추가한 이유는 현재 디렉토리(.)를 클래스패스에 포함시키기 위해서이다.<br>
	 * 클래스패스를 지정해 주지 않으면 기본적으로 현재 디렉토리(.)가 클래스패스로 지정되지만, 이처럼 클래스패스를 따로 지정해주는 경우에는 더 이상 현재 디렉토리가 자동적으로 클래스패스로 지정되지 않기 때문에 이처럼 별도로 추가를 해주어야 한다.<br>
	 * JDK에 기본적으로 설정되어 있는 클래스패스를 이용하면 클래스패스를 따로 설정하지 않아도 된다.<br>
	 * <small>※jre디렉토리 아래의 classes디렉토리는 JDK설치 시에 자동으로 생성되지 않으므로 사용자가 직접 생성해야 한다.</small>
	 */
	class Memo2 {

	}

	/**
	 * <h5>3.3 import문</h5><br>
	 * 클래스의 코드를 작성하기 전에 import문으로 사용하고자 하는 클래스의 패키지를 미리 명시해주면 소스코드에 사용되는 클래스이름에서 패키지명은 생략할 수 있다.<br>
	 * import문의 역할을 컴파일러에게 소스파일에 사용된 클래스의 패키지에 대한 정보를 제공하는 것이다. 컴파일 시에 컴파일러는 import문을 통해 소스파일에 사용된 클래스들의 패키지를 알아 낸 다음, 모든 클래스이름 앞에 패키지명을 붙여 준다.<br>
	 * <small>※import문은 프로그램의 성능에 전혀 영향을 미치지 않는다. import문을 많이 사용하면 컴파일 시간이 아주 조금 더 걸릴 뿐이다.</small>
	 */
	class Memo3 {

	}

	/**
	 * <h5>3.4 import문의 선언</h5><br>
	 * 모든 소스파일(.java)에서 import문은 package문 다음에, 그리고 클래스 선언문 이전에 위치해야 한다. import문은 package문과 달리 한 소스파일에 여러 번 선언할 수 있다.<br>
	 * 일반적인 소스파일(*.java)의 구성은 다음의 순서로 되어 있다.<br>
	 * <pre><code>
	 * 		1. package문
	 * 		2. import문
	 * 		3. 클래스 선언
	 * </code></pre>
	 * <br>
	 * import문을 선언하는 방법<br>
	 * <pre><code>
	 *     import 패키지명.클래스명;
	 *     		또는
	 *     import 패키지명.*;
	 * </code></pre>
	 */
	class Memo4 {

	}

	/**
	 * <h5>3.5 static import문</h5><br>
	 * static import문을 사용하면 static멤버를 호출할 때 클래스 이름을 생략할 수 있다.
	 */
	class Memo5 {

	}

}
