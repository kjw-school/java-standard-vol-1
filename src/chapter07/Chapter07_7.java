package chapter07;

/**
 * <h1>7. 인터페이스(interface)</h1>
 */
public class Chapter07_7 {

	/**
	 * <h5>7.1 인터페이스란?</h5><br>
	 * 인터페이스는 일종의 추상클래스이다. 인터페이스는 추상클래스처럼 추상메서드를 갖지만 추상클래스보다 추상화 정도가 높아서 추상클래스와 달리 몸통을 갖춘 일반 메서드 또는 멤버변수를 구성원으로 가질 수 없다.<br>
	 * 오직 추상메서드와 상수만을 멤버로 가질 수 있으며, 그 외의 다른 어떠한 요소도 허용하지 않는다.<br>
	 * 추상클래스를 부분적으로만 완성된 '미완성 설계도'라고 한다면, 인터페이스는 구현된 것은 아무 것도 없고 밑그림만 그려져 있는 '기본 설계도'라 할 수 있다.<br>
	 * 인터페이스도 추상클래스처럼 완성되지 않은 불완전한 것이기 때문에 그 자체만으로 사용되기 보다는 다른 클래스를 작성하는데 도움 줄 목적으로 작성된다.
	 */
	class Memo1 {

	}

	/**
	 * <h5>7.2 인터페이스의 작성</h5><br>
	 * 인터페이스를 작성하는 것은 클래스를 작성하는 것과 같다. 다만 키워드로 class 대신 interface를 사용한다는 것만 다르다. 그리고 interface에도 클래스와 같이 접근제어자로 public 또는 default를 사용할 수 있다.<br>
	 * <pre><code>
	 *     interface 인터페이스이름 {
	 *         public static final 타입 상수이름 = 값;
	 *         public abstract 메서드이름(매개변수목록);
	 *     }
	 * </code></pre><br>
	 * - 모든 멤버변수는 public static final 이어야 하며, 이를 생략할 수 있다.<br>
	 * - 모든 메서드는 public abstract 이어야 하며, 이를 생략할 수 있다.단, static메서드와 디폴트 메서드는 예외(JDK1.8부터)<br>
	 * 인터페이스에 정의된 모든 멤버에 예외없이 적용되는 사항이기 때문에 제어자를 생략할 수 있는 것이며, 편의상 생략하는 경우가 많다. 생략된 제어자는 컴파일 시에 컴파일러가 자동적으로 추가해준다.<br>
	 * 원래는 인터페이스의 모든 메서드는 추상메서드이어야 하는데, JDK1.8부터 인터페이스에 static메서드와 디폴트 메서드(defaule method)의 추가를 허용하는 방향으로 변경되었다.<br>
	 */
	class Memo2 {

	}

	/**
	 * <h5>7.3 인터페이스의 상속</h5><br>
	 * 인터페이스는 인터페이스로부터만 상속받을 수 있으며, 클래스와는 달리 다중상속, 즉 여러 개의 인터페이스로부터 상속을 받는 것이 가능하다.<br.
	 * <small>※인터페이스는 클래스와 달리 Object클래스와 같은 최고 조상이 없다.</small><br>
	 * <pre><code>
	 *     interface Movable {
	 *         // 지정된 위치(x, y)로 이동하는 기능의 메서드
	 *         void move(int x, int y);
	 *     }
	 *
	 *     interface Attackable {
	 *         // 지정된 대상(u)을 공격하는 기능의 메서드
	 *         void attack(Unit u);
	 *     }
	 *
	 *     interface Fightable extends Movable, Attackable {}
	 * </code></pre>
	 * 클래스의 상속과 마찬가지로 자손 인터페이스(Fightable)는 조상 인터페이스(Movable, Attackable)의 모든 정의된 멤버를 모두 상속받는다.
	 */
	class Memo3 {

	}

	/**
	 * <h5>7.4 인터페이스의 구현</h5><br>
	 * 인터페이스도 추상클래스처럼 그 자체로는 인스턴스를 생성할 수 없으며, 추상클래스가 상속을 통해 추상메서드를 완성하는 것처럼, 인터페이스도 자신에 정의된 추상메서드의 몸통을 만들어주는 클래스를 작성해야 하는데,<br>
	 * 그 방법은 추상클래스가 자신을 상속받는 클래스를 정의하는 것과 다르지 않다. 다만 클래스는 확장한다는 의미의 키워드 'extends'를 사용하지만 인터페이스는 구현한다는 의미의 키워드 'implements'를 사용할 뿐이다.<br>
	 * 만일 구현하는 인터페이스의 메서드 중 일부만 구현한다면, abstract를 붙여서 추상클래스로 선언해야 한다.<br>
	 * <small>※ 인터페이스의 이름에는 주로 Fightable과 같이 '~을 할 수 있는`의 의미인 'able'로 끝나는 것들이 많은데, 그 이유는 어떠한 기능 또는 행위를 하는데 필요한 메서드를 제공한다는 의미를 강조하기 위해서이다. 또한 그 인터페이스를 구현한 클래스는 '~를 할 수 있는' 능력을 갖추었다는 의미이기도 하다. 이름이 'able'로 끝나는 것은 인터페이스라고 추측할 수 있지만, 모든 인터페이스의 이름이 반드시 'able'로 끝나야 하는 것은 아니다.</small>
	 */
	class Memo4 {

	}

	/**
	 * <h5>7.5 인터페이스를 이용한 다중상속</h5><br>
	 * 두 조상으로부터 상속받는 멤버 중에서 멤버변수의 이름이 같거나 메서드의 선언부가 일치하고 구현 내용이 다르다면 이 두 조상으로부터 상속받는 자손클래스는 어느 조상의 것을 상속받게 되는 것인지 알 수 없다.<br>
	 * 어느 한쪽으로부터의 상속을 포기하던가, 이름이 충돌하지 않도록 조상클래스를 변경하는 수밖에 없다.<br>
	 * 그래서 다중상속은 장점도 있지만 단점이 더 크다고 판단하였기 때문에 자바에서는 다중상속을 허용하지 않는다.<br>
	 * 그러나 또 다른 객체지향언어인 C++에서는 다중상속을 허용하기 때문에 자바는 다중상속을 허용하지 않는다는 것이 단점으로 부각되는 것에 대한 대응으로 '자바도 인터페이스를 이용하면 다중상속이 가능하다.'라고 하는 것일 뿐 자바에서 인터페이스로 다중상속을 구현하는 경우는 거의 없다.<br>
	 * 인터페이스는 static상수만 정의할 수 있으므로 조상클래스의 멤버변수와 충돌하는 경우는 거의 없고 충돌된다 하더라도 클래스 이름을 붙여서 구분이 가능하다. <br>
	 * 그리고 추상메서드는 구현내용이 전혀 없으므로 조상클래스의 메서드와 선언부가 일치하는 경우에는 당연히 조상 클래스 쪽의 메서드를 상속받으면 되므로 문제되지 않는다.<br>
	 * 그러나, 이렇게 하면 상속받는 멤버의 충돌은 피할 수 있지만, 다중상속의 장점을 잃게된다. 만일 두 개의 클래스로부터 상속을 받아야 할 상황이라면, 두 조상클래스 중에서 비중이 높은 쪽을 선택하고 다른 한쪽은 클래스 내부에 멤버로 포함시키는 방식으로 처리하거나 어느 한쪽의 필요한 부분을 뽑아서 인터페이스로 만든 다음 구현하도록 한다.
	 */
	class Memo5 {

	}

	/**
	 * <h5>7.6 인터페이스를 이용한 다형성</h5><br>
	 * 다형성에 대해 학습할 때 자손클래스의 인스턴스를 조상타입의 참조변수로 참조하는 것이 가능하다는 것을 배웠다. <br>
	 * 인터페이스 역시 이를 구현한 클래스의 조상이라 할 수 있으므로 해당 인터페이스 타입의 참조변수로 이를 구현한 클래스의 인스턴스를 참조할 수 있으며, 인터페이스 타입으로의 형변환도 가능하다.<br>
	 * <pre><code>
	 *     Fightable f = (Fightable)new Fighter();
	 *     또는
	 *     Fightable f = new Fighter();
	 * </code></pre>
	 * <br>
	 * <small>※Fightable타입의 참조변수로는 인터페이스 Fightable에 정의된 멤버들만 호출이 가능하다.</small>
	 * <br>
	 * 따라서 인터페이스는 다음과 같이 메서드의 매개변수의 타입으로 사용될 수 있다.<br>
	 * <pre><code>
	 *     void attack(Fightable f) { //... }
	 * </code></pre>
	 * <br>
	 * 인터페이스 타입의 매개변수가 갖는 의미는 메서드 호출 시 해당 인터페이스를 구현한 클래스의 인스턴스를 매개변수로 제공해야한다는 것이다.<br>
	 * <b>리턴타입이 인터페이스라는 것은 메서드가 해당 인터페이스를 구현한 클래스의 인스턴스를 반환한다는 것을 의미한다.</b>
	 */
	class Memo6 {

	}

	/**
	 * <h5>7.7 인터페이스의 장점</h5><br>
	 * <pre><code>
	 *     - 개발시간을 단축시킬 수 있다.
	 *     - 표준화가 가능하다.
	 *     - 서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다.
	 *     - 독립적인 프로그래밍이 가능하다.
	 * </code></pre>
	 * <br>
	 * <pre><code>
	 *     1. 개발시간을 단축시킬 수 있다.
	 *     일단 인터페이스가 작성되면, 이를 사용해서 프로그램을 작성하는 것이 가능하다. 메서드를 호출하는 쪽에서는 메서드의 내용에 관계없이 선언부만 알면 되기 때문이다.
	 *     그리고 동시에 다른 한 쪽에서는 인터페이스를 구현하는 클래스를 작성하게 하면, 인터페이스를 구현하는 클래스가 작성될 때까지 기다리지 않고도 양쪽에서 동시에 개발을 진행할 수 있다.
	 *     2. 표준화가 가능하다.
	 *     프로젝트에 사용되는 기본틀을 인터페이스로 작성한 다음, 개발자들에게 인터페이스를 구현하여 프로그램을 작성하도록 함으로써 보다 일관되고 정형화된 프로그램의 개발이 가능하다.
	 *     3. 서로 관계 없는 클래스들에게 관계를 맺어줄 수 있다.
	 *     서로 상속관계에 있지도 않고, 같은 조상클래스를 가지고 있지 않은 서로 아무런 관계도 없는 클래스들에게 하나의 인터페이스를 공통적으로 구현하도록 함으로써 관계를 맺어줄 수 있다.
	 *     4. 독립적인 프로그래밍이 가능하다.
	 *     인터페이스를 이용하면 클래스의 선언과 구현을 분리시킬 수 있기 때문에 실제구현에 독립적인 프로그램을 작성하는 것이 가능하다. 클래스와 클래스간의 직접적인 관계를 인터페이스를 이용해서 간접적인 관계로 변경하면,
	 *     한 클래스의 변경이 관련된 다른 클래스에 영향을 미치지 않는 독립적인 프로그래밍이 가능하다.
	 * </code></pre>
	 */
	class Memo7 {

	}

	/**
	 * <h5>7.8 인터페이스의 이해</h5><br>
	 * 먼저 인터페이스를 이해하기 위해서는 다음의 두 가지 사항을 반드시 염두에 두고 있어야 한다.<br>
	 * <pre><code>
	 *     - 클래스를 사용하는 쪽(User)과 클래스를 제공하는 쪽(Provider)이 있다.
	 *     - 메서드를 사용(호출)하는 쪽(User)에서는 사용하려는 메서드(Provider)의 선언부만 알면 된다.(내용은 몰라도 된다.)
	 * </code></pre>
	 * <br>
	 * <pre><code>
	 *     class A {
	 *         public void methodA() {
	 *             bg.methodB();
	 *         }
	 *     }
	 *
	 *     class B {
	 *         public void methodB() {
	 *             System.out.println("methodB()");
	 *         }
	 *     }
	 *
	 *     clas InterfaceTest {
	 *         public static void main(String args[]) {
	 *             A a = new A();
	 *             a.methodA(new B());
	 *         }
	 *     }
	 * </code></pre>
	 * <br>
	 * 클래스 A와 클래스 B가 있다고 하자. 클래스 A(User)는 클래스 B(Provider)의 인스턴스를 생성하고 메서드를 호출한다. 이 두 클래스는 서로 직접적인 관계에 있다. 이것을 간단히 'A-B'라고 표현하자.<br>
	 * 이 경우 클래스 A를 작성하려면 클래스 B가 이미 작성되어 있어야 한다. 그리고 클래스 B의 methodB()의 선언부가 변경되면, 이를 사용하는 클래스 A도 변경되어야 한다.<br>
	 * 이와 같이 직접적인 관계의 두 클래스는 한 쪽(Provider)이 변경되면 다른 한 쪽(User)도 변경되어야 한다는 단점이 있다.<br>
	 * 그러나 클래스 A가 클래스 B를 직접 호출하지 않고 인터페이스를 매개체로 해서 클래스 A가 인터페이스를 통해서 클래스 B의 메서드에 접근하도록 하면, 클래스 B에 변경사항이 생기거나 클래스 B와 같은 기능의 다른 클래스로 대체 되어도 클래스 A는 전혀 영향을 받지 않도록 하는 것이 가능하다.<br>
	 * 두 클래스간의 관계를 간접적으로 변경하기 위해서는 먼저 인터페이스를 이용해서 클래스 B(Provider)의 선언과 구현을 분리해야한다.<br>
	 * <pre><code>
	 *    interface I {
	 *        public abstract void methodB();
	 *    }
	 *
	 *    class B implements I {
	 *        public void methodB() {
	 *            System.out.println("methodB in B class");
	 *        }
	 *    }
	 *
	 *    class A {
	 *        public void methodA(I i) {
	 *            i.methodB();
	 *        }
	 *    }
	 * </code></pre>
	 * <br>
	 * 클래스 A를 작성하는데 있어서 클래스 B가 사용되지 않았다는 점에 주목하자. 이제 클래스 A와 클래스 B는 'A-B'의 직접적인 관계에서 'A-I-B'의 간접적인 관계로 바뀐 것이다.<br>
	 * 결국 클래스 A는 여전히 클래스 B의 메서드를 호출하지만, 클래스 A는 인터페이스 I하고 만 직접적인 관계에 있기 때문에 클래스 B의 변경에 영향을 받지 않는다.<br>
	 * 클래스 A는 인터페이스를 통해 실제로 사용하는 클래스의 이름을 몰라도 되고 심지어는 실제로 구현된 클래스가 존재하지 않아도 문제되지 않는다. 클래스 A는 오직 직접적인 관계에 있는 인터페이스 I의 영향만 받는다.<br>
	 * 인터페이스 I는 실제구현 내용(클래스 B)을 감싸고 있는 껍데기이며, 클래스 A는 껍데기 안에 어떤 알맹이(클래스)가 들어 있는지 몰라도 된다.
	 */
	class Memo8 {

	}

	/**
	 * <h5>7.9 디폴트 메서드와 static메서드</h5><br>
	 * 원래는 인터페이스에 추상 메서드만 선언할 수 있는데, JDK1.8부터 디폴트 메서드와 static메서드도 추가할 수 있게 되었다. static메서드는 인스턴스와 관계가 없는 독립적인 메서드이기 때문에 예전부터 인터페이스에 추가하지 못할 이유가 없었다.<br>
	 * 자바를 보다 쉽게 배울 수 있도록 규칙을 단순히 할 필요가 있어서 인터페이스의 모든 메서드는 추상 메서드이어야 한다는 규칙에 예외를 두지 않았다. 덕분에 인터페이스와 관련된 static메서드는 별도의 클래스에 따로 두어야 한다.<br>
	 * 가장 대표적인 것으로 java.util.Collection인터페이스가 있는데, 이 인터페이스와 관련된 static메서드들이 인터페이스에는 추상 메서드만 선언할 수 있다는 원칙 때문에 별도의 클래스, Collections라는 클래스에 들어가게 되었다.<br>
	 * 만일 인터페이스에 static메서드를 추가할 수 있었다면, Collections클래스는 존재하지 않았을 것이다.<br>
	 * 인터페이스의 static메서드 역시 접근 제어자가 항상 public이며, 생략할 수 있다.
	 */
	class Memo9 {

	}

	/**
	 * <h5>디폴트 메서드</h5><br>
	 * 인터페이스에 메서드를 추가한다는 것은, 추상 메서드를 추가한다는 것이고, 이 인터페이스를 구현한 기존의 모든 클래스들이 새로 추가된 메서드를 구현해야하기 때문이다.<br>
	 * 디폴트 메서드(default method)는 추상 메서드의 기본적인 구현을 제공하는 메서드로, 추상 메서드가 아니기 때문에 디폴트 메서드가 새로 추가되어도 해당 인터페이스를 구현한 클래스를 변경하지 않아도 된다.<br>
	 * 디폴트 메서드는 앞에 키워드 default를 붙이며, 추상 메서드와 달리 일반 메서드처럼 몸통{}이 있어야 한다. 디폴트 메서드 역시 접근 제어자가 public이며, 생략가능하다.<br>
	 * <pre><code>
	 *     interface MyInterface {
	 *         void method();
	 *         void newMethod(); // 추상 메서드
	 *     }
	 *     ↓
	 *     interface MyInterface {
	 *     	   void method();
	 *     	   default void newMethod() {}
	 *     }
	 * </code></pre>
	 * <br>
	 * 새로 추가된 디폴트 메서드가 기존의 메서드와 이름이 중복되어 충돌하는 경우가 발생한다. 이 충돌을 해결하는 규칙은 다음과 같다.<br>
	 * <pre><code>
	 *     1. 여러 인터페이스의 디폴트 메서드 간의 충돌
	 *     - 인터페이스를 구현한 클래스에서 디폴트 메서드를 오버라이딩해야 한다.
	 *     2. 디폴트 메서드와 조상 클래스의 메서드 간의 충돌
	 *     - 조상 클래스의 메서드가 상속되고, 디폴트 메서드는 무시된다.
	 * </code></pre>
	 */
	class Memo10 {

	}

}
