package chapter02;

/**
 * <h1>3. 진법</h1>
 */
public class Chapter02_3 {

	/**
	 * <h5>3.1 10진법과 2진법</h5><br>
	 * 1946년에 개발된 컴퓨터인 애니악(ENIAC)은 사람에게 익숙한 10진법을 사용하도록 설계되었으나 전기회로는 전압이 불안정해서 전압을 10단계로 나누어 처리하는 데 한계가 있었다.<br>
	 * 1950년에 개발된 에드박(EDVAC) 은 단 두가지 단계, 전기가 흐르면 1, 흐르지 않으면 0, 만으로 동작하도록 설계되었고 매우 성공적이었다.<br>
	 * 컴퓨터는 2진수(0과1) 밖에 모르기 때문에 아래의 오른쪽과 같이 2진수로 바뀌어 저장된다.<br>
	 * <small>int타입의 크기가 4 byte이면, 32자리의 2진수로 표현해야하지만 앞의 0은 생략하였다. 0을 생략하지 않으면, '11001'이 아니라'000000000000000000000000000000000000000000000000000011001'이다.</small>
	 */
	class Memo01 {

	}

	/**
	 * <h5>3.2 비트(bit)와 바이트(byte)</h5><br>
	 * 한 자리의 2진수를 '비트(bit, binary digit)'라고 하며, 1 비트는 컴퓨터가 값을 저장할 수 있는 최소단위이다. 1비트 8개를 묶어서 '바이트'라는 단위로 정의해서 데이터의 기본 단위로 사용한다.<br>
	 * '워드(word)'라는 단위가 있는데, '워드(word)'는 'CPU가 한 번에 처리할 수 있는 데이터의 크기'를 의미한다.<br>
	 * n비트로 2^n개의 값을 표현할 수 있다.표현가능한 10진수의 범위는 0~2^n-1이 된다.<br>
	 * n비트로 표현할 수 있는 10진수<br>
	 * 값의 개수 : 2^n<br>
	 * 값의 범위 : 0~2^n-1
	 */
	class Memo02 {

	}

	/**
	 * <h5>3.3 8진법과 16진법</h5><br>
	 * 8진수는 2진수 3자리를, 16진수는 2진수 4자리를 각각 한자리로 표현할 수 있기 때문에 자리수가 짧아져서 알아보기 쉽고 서로 간의 변환방법또한 매우 간단하다.<br>
	 * 8진법은 값을 표현하는데 8개의 기호가 필요하므로 0~7의 숫자를 기호로 사용하면 되지만, 16진법은 16개의 기호가 필요하므로 0~9의 숫자만으로는 부족하다. 그래서 6개의 문자(A~F)를 추가로 사용한다.<br>
	 */
	class Memo03 {
	}

	/**
	 * <h5>2진수를 8진수, 16진수로 변환</h5><br>
	 * 2진수를 8진수로 변환하려면, 2진수를 뒤에서부터 3자리씩 끊어서 그에 해당하는 8진수로 바꾸면 된다. 8은 2^3이기 때문에, 8진수 한 자리가2진수 3자리를 대신할 수 있는 것이다.<br>
	 * 2진수를 16진수로 변환하는 방법 역시 이와 비슷한데, 3자리가 아닌 4자리씩 끊어서 바꾼다는 점만 다르다.
	 */
	class Memo04 {
	}

	/**
	 * <h5>3.4 정수의 진법 변환</h5><br>
	 * 10진수를 n진수로 변환<br>
	 * 10진수를 다른 진수로 변환하려면, 해당 진수로 나누고 나머지 값을 옆에 적는 것을 더 이상 나눌 수 없을 때까지 반복한 다음 마지막 몫과 나머지를 아래부터 위로 순서대로 적으면 된다.<br>
	 * 2 % 46 -> 23(몫), 0(나머지)<br>
	 * 2 46 나머지<br>
	 * 2 23 0<br>
	 * 2 11 0<br>
	 * 2 5 0<br>
	 * 2 2 0<br>
	 *   1 0<br>
	 * 46(10) -> 10110(2)
	 */
	class Memo05 {
	}

	/**
	 * <h5>n진수를 10진수로 변환</h5><br>
	 * 어떤 진법의 수라도 10진수로 변환하는 방법은 똑같다. 각 자리의 수에 해당 단위의 값을 곱해서 모두 더하면 된다. 예를 들어 10진수 123은다음과 같이 풀어쓸 수 있다.<br>
	 * 123(10) = 100 + 20 + 3<br>
	 *         = 1 x 100 + 2 x 10 + 3 x 1<br>
	 *         = 1 x 10^2 + 2 x 10^1+ 3 x 10^0<br>
	 */
	class Memo06 {
	}

	/**
	 * <h5>3.5 실수의 진법변환</h5><br>
	 * 10진 소수점수를 2진 소수점수로 변환하는 방법<br>
	 * 1. 10진 소수에 2를 곱한다.<br>
	 * 0.625 x 2 = 1.25<br>
	 * 2. 위의 결과에서 소수부만 가져다가 다시 2를 곱한다.<br>
	 * 0.25 x 2 = 0.5<br>
	 * 3. 1과 2의 과정을 소수부가 0이 될 때까지 반복한다.<br>
	 * 0.5 x 2 = 1.0<br>
	 * ※ 3의 과정에서 소수가 0이 되지않고 무한히 반복될 수도 있다.<br>
	 * 위의 결과에서 정수부만을 위에서 아래로 순서대로 적고 '0.'을 앞에 붙이면 된다.<br>
	 * 0.625 x 2 = 1.25       ↓<br>
	 * 0.25 x 2 = 0.5         ↓<br>
	 * 0.5 x 2 = 1.0          ↓<br>
	 * 0.625(10) -> 0.101(2)<br>
	 * 참고로 10진 소수를 10진 소수로 변환하는 방법은 다음과 같다. 2대신 10을 곱할 뿐이다.<br>
	 * 0.625 x 10 = 6.25<br>
	 * 0.25 x 10 = 2.5<br>
	 * 0.5 x 10 = 5.0<br>
	 * 0.625(10) -> 0.625(10)
	 */
	class Memo07 {
	}

	/**
	 * <h5>3.6 음수의 2진표현 - 2의 보수법</h5><br>
	 * 4비트의 2진수로 부호있는 정수, 즉 양수와 음수를 모두 표현하려면 어떻게 해야할까? 4비트 2진수의 절반인 8개는 0으로 시작하고,<br>
	 * 나머지 절반은 1로 시작하니까, 1로 시작하는 2진수를 음수표현에 사용하자. 이렇게 하면, '왼쪽의 첫 번째 비트(MSB)'가 0이 면 양수, 1이면 음수이므로 첫 번째 비트만으로 값의 부호를 알 수 있게 된다.<br>
	 * ※ 2진수의 제일 왼쪽의 1 bit를 MSB(most significant bit)라고 한다.<br>
	 * # | 2진수 | 부호있는 10진수<br>
	 * 1 | 0000 | 0<br>
	 * 2 | 0001 | 1<br>
	 * 3 | 0010 | 2<br>
	 * 4 | 0011 | 3<br>
	 * 5 | 0100 | 4<br>
	 * 6 | 0101 | 5<br>
	 * 7 | 0110 | 6<br>
	 * 8 | 0111 | 7 <- 최대값<br>
	 * 9 | 1000 | -8 <- 최소값<br>
	 * 10 | 1001 | -7<br>
	 * 11 | 1010 | -6<br>
	 * 12 | 1011 | -5<br>
	 * 13 | 1100 | -4<br>
	 * 14 | 1101 | -3<br>
	 * 15 | 1110 | -2<br>
	 * 16 | 1111 | -1<br>
	 * 위와 같이'2의 보수법'에 의해 음수를 배치하면, 절대값이 같은 양수와 음수를 더 했을 때 2진수로도 0을 결과로 얻으므로 부호를 신경쓰지않고 덧셈할 수 있게 된다.
	 */
	class Memo08 {
	}

	/**
	 * <h5>2의 보수법</h5><br>
	 * 어떤 수의 'n의 보수'는 더했을 때 n이 되는 수를 말한다.<br>
	 * 2진수로 '10'은 자리올림이 발생하고 0이 되는 수를 뜻한다. '2의 보수 관계'에 있는 두 2진수를 더하면 '(자리올림이 발생하고)0이 된다.'<br>
	 * 2의 보수 = 1의 보수 + 1, '1의 보수'는 0을 1로, 1을 0으로만 바꾸면 된다.<br>
	 * 음수의 2진 표현을 구하는 방법<br>
	 * (1) 음수의 절대값을 2진수로 변환한다.<br>
	 * : -5의 절대값인 5를 2진수로 변환한다. 10진수 5를 2진수로 변환하면 '0101'이다.<br>
	 * (2) (1)에서 구한 2진수의 1을 0으로 0은 1로 바꾼다.(1의 보수 구하기)<br>
	 * : '0101'이 '1010'이 된다.<br>
	 * (3) (2)의 결과에 1을 더한다.(2의 보수 구하기, 1의 보수 +1)<br>
	 * : '1010'에 1을 더하면 '1011'이 되고, 이것이 -5의 2진 표현이다.
	 */
	class Memo09 {
	}

}
