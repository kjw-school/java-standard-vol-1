package chapter02;

/**
 * <h1>4. 기본형(primitive type)</h1>
 */
public class Chapter02_4 {

	/**
	 * <h5>4.1 논리형 - boolean</h5><br>
	 * 논리형에는 'boolean' 한가지 밖에 없다. boolean형 변수에는 true와 false 중 하나를 저장할 수 있으며 기본값(default)은 false이다.<br>
	 * 자바에서는 대소문자가 구별되기 떄문에 TRUE와 true는 다른 것으로 간주된다는 것에 주의하자.
	 */
	class Memo01 {
	}

	/**
	 * <h5>4.2 문자형 - char</h5><br>
	 * 문자형 역시 'char'한 가지 자료형밖에 없다. 문자를 저장하기 위한 변수를 선언할 때 사용되며, char타입의 변수는 단 하나의 문자만을 저장할 수 있다.<br>
	 * 변수에 '문자'가 저장되는 것 같지만, 사실은 문자가 아닌 '문자의 유니코드(정수)'가 저장된다. 컴퓨터는 숫자밖에 모르기 때문에 모든 데이터를 숫자로 변환하여 저장하는 것이다.<br>
	 * 문자'A'의 유니코드는 65이르모, 변수 ch에는 65가 저장된다.<br>
	 * char ch = 'A'; // 문자 'A'를 char타입의 변수 ch에 저장.<br>
	 * 그래서 문자 리터럴 대신 문자의 유니코드를 직접 저장할 수도 있다.<br>
	 * 만일 어떤 문자의 유니코드를 알고 싶으면, char형 변수에 저장된 값을 정수형(int)으로 변환하면 된다.
	 */
	class Memo02 {
	}

	/**
	 * <h5>특수 문자 다루기</h5><br>
	 * <table border="1">
	 *     <tr>
	 *         <th>특수 문자</th>
	 *         <th>문자 리터럴</th>
	 *     </tr>
	 *     <tr>
	 *         <td>tab</td>
	 *         <td>\t</td>
	 *     </tr>
	 *     <tr>
	 *         <td>backspace</td>
	 *         <td>\b</td>
	 *     </tr>
	 *     <tr>
	 *         <td>form feed</td>
	 *         <td>\f</td>
	 *     </tr>
	 *     <tr>
	 *         <td>new line</td>
	 *         <td>\n</td>
	 *     </tr>
	 *     <tr>
	 *         <td>carriage return</td>
	 *         <td>\r</td>
	 *     </tr>
	 *     <tr>
	 *         <td>역슬래쉬(\)</td>
	 *         <td>\\</td>
	 *     </tr>
	 *     <tr>
	 *         <td>작은따옴표</td>
	 *         <td>\'</td>
	 *     </tr>
	 *     <tr>
	 *         <td>큰따옴표</td>
	 *         <td>\"</td>
	 *     </tr>
	 *     <tr>
	 *         <td>유니코드(16진수)문자</td>
	 *         <td>\u유니코드(예 char a='\u00041')</td>
	 *     </tr>
	 * </table>
	 */
	class Memo03 {

	}

	/**
	 * <h5>char타입의 표현형식</h5><br>
	 * char타입의 크기는 2 byte(=16 bit)이므로, 16자리의 2진수로 표현할 수 있는 정수의 개수인 65536개(=2^16)의 코드를 사용할 수 있으며,<br>
	 * char형 변수는 이 범위 내의 코드 중 하나를 저장할 수 있다.<br>
	 * char타입은 문자를 저장할 변수를 선언하기 위한 것이지만, 실제로 char타입의 변수에는 문자가 아닌 '문자의 유니코드(정수)'가 저장되고, 표현형식 역시 정수형과 동일하다.<br>
	 * 다만, 정수형과 달리 음수를 나타낼 필요가 없으므로 표현할 수 있는 값의 범위가 다르다.<br>
	 * 2 byte(= 16bit)로는 모두 2^16(=65536)개의 값을 표현할 수 있는데, char타입에 저장되는 값인 유니코드는 모두 양수(0 포함)이므로, '0~65535)의 범위를 가지며,<br>
	 * 정수형인 'short'은 절반을 음수표현에 사용하므로 '-32768~32767`을 범위로 갖는다.<br>
	 * <b>16비트로 표현할 수 있는 정수의 개수: 2^16개(65536개)</b><br>
	 * short타입의 표현범위: -2^16 ~ 2^16-1(-32768~32767)<br>
	 * char타입의 표현범위: 0~2^16-1(0~65535)
	 */
	class Memo04 {
	}

	/**
	 * <h5>인코딩과 디코딩(encoding & decoding)</h5><br>
	 * 문자를 코드로 변환하는 것을 '문자 인코딩(encoding)', 그 반대로 코드를 문자로 변환하는 것을 '문자 디코딩(decoding)'이라고 한다.<br>
	 * 문자를 저장할 때는 인코딩을 해서 숫자로 변환해서 저장하고, 저장된 문자를 읽어올 때는 디코딩을 해서 숫자를 원래의 문자로 되돌려야 한다
	 */
	class Memo05 {
	}

	/**
	 * <h5>아스키(ASCII)</h5><br>
	 * 'ASCII'는 'American Standard Code for Information Interchange'의 약어로 정보교환을 위한 미국 표준 코드란 뜻이다.<br>
	 * 아스키는 128개(=2^7)의 문자 집합(character set)을 제공하는 7bit 부호로,<br>
	 * 처음 32개의 문자는 인쇄와 전송 제어용으로 사용되는 '제어문자(control character)'로 출력할 수 없고 마지막 문자(DEL)을 제외한 33번째 이후의 문자들은 출력할 수 있는 문자들로, 기호와 숫자, 영대소문자로 이루어져 있다.
	 */
	class Memo06 {
	}

	/**
	 * <h5>유니코드(Unicode)</h5><br>
	 * 예전엔 같은 지역 내에서만 문서교환이 주를 이뤘지만, 인터넷이 발명되면서 서로 다른 지역의 다른 언어를 사용하는 컴퓨터간의 문서교환이 활발해지기 시작하자 서로 다른 문자 인코딩을 사용하는 컴퓨터간의 문서교환에 어려움을 겪게 되었다.<br>
	 * 이러한 어려움을 해소하고자 전 세계의 문자를 하나의 통일된 문자집합으로 표현하고자 노력하였고 그 결과가 바로 '유니코드'이다.<br>
	 * 유니코드는 처음엔 모든 문자를 2 byte(=2^16=65536)로 표현하려했으나, 2 byte(=16 bit)로도 부족해서 21 bit(약 200만 문자)로 확장되었다.<br>
	 * 새로 추가된 문자들을 보충 문자(supplementary character)라고 하는데 이 문자들을 표현하기 위해서는 char타입이 아닌 int타입을 사용해야 한다.<br>
	 * 유니코드는 먼저 유니코드에 포함시키고자 하는 문자들의 집합을 정의하였는데, 이것을 유니코드 문자 셋(또는 캐릭터 셋, character set)이라고 한다.<br>
	 * 그리고 이 문자 셋에 번호를 붙인 것이 유니코드 인코딩이다. 유니코드 인코딩에는 UTF-8, UTF-16, UTF-32 등 여러가지 종류가 있는데 자바에서는 UTF-16을 사용한다.<br>
	 * UTF-16은 모든 문자를 2 byte의 고정크기로 표현하고 UTF-8은 하나의 문자를 1~4 byte의 가변크기로 표현한다.<br>
	 * 그리고 두 인코딩 모두 처음 128문자가 아스키와 동일하다.<br>
	 * <small>※코드 포인트(code point)는 유니코드 문자 셋에 순서대로 붙인 일련번호이다. 유니코드에는 뭐라고 읽는지도 알 수 없는 문자들이 많이 포함되어 있으므로, 이 문자들은 번호(코드 포인트)로 다루는 것이 편리하다.</small><br>
	 * 모든 문자의 크기가 동일한 UTF-16의 문자를 다루기는 편리하지만, 1 byte로 표현할 수 있는 영어와 숫자가 2 byte로 표현되므로 문서의 크기가 커진다는 단점이 있다.<br>
	 * UTF-8에서 영문과 숫자는 1 byte 그리고 한글은 3 byte로 표현되기 때문에 문서의 크기가 작지만 문자의 크기가 가변적이므로 다루기 어렵다는 단점이 있다.
	 */
	class Memo07 {
	}

	/**
	 * <h5>4.3 정수형 - byte, short, int, long</h5><br>
	 */
	class Memo08 {
	}
}
