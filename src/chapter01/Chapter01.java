package chapter01;

/**
 * <h5>자바를 시작하기 전에</h5>
 */
public class Chapter01 {

    /**
	 * <p>
	 * 		<h5>1. 자바(Java Programming Language)</h5><br>
	 * 		1.1 자바란?<br>
	 * 		자바는 썬 마이크로시스템즈(Sun Microsystems, Inc, 이하 썬)에서 개발하여 1996년 1월 에 공식적으로 발표한 객체지향 프로그래밍 언어이다.<br>
	 *		자바의 가장 중요한 특징은 운영체제(Operating System, 플랫폼)에 독립적이라는 것이다. 자바로 작성된 프로그램은 운영체제의 종류에 관계없이 실행이 가능하기 때문에<br>
	 *		영체제에 따라 프로그램을 전혀 변경하지 않고도 실행이 가능하다.
	 * </p>
     */
	class Memo01{}

    /**
     * <p>
	 *		<h5>1.3 자바언어의 특징</h5><br>
	 *		<b>1. 운영체제에 독립적이다</b><br>
	 *		기존의 언어는 한 운영체제에 맞게 개발된 프로그램을 다른 종류의 운영체제에 적용하기 위해서는 많은 노력이 필요하였지만,<br>
	 *		자바에서는 더 이상 그런 노력을 하지 않아도 된다.<br>
	 *		이것은 일종의 에뮬레이터인 자바가상머신(JVM)을 통해서 가능한 것인데, 자바 응용프로그램은 운영체제나 하드웨어가 아닌 JVM하고만 통신하고<br>
	 *		JVM이 자바 응용프로그램으로부터 전달받은 명령을 해당 운영체제가 이해할 수 있도록 변환하여 전달한다.<br>
	 *		자바로 작성된 프로그램은 운영체제에 독립적이지만 VJM은 운영체제에 종속적이다.<br>
	 *		자바로 작성된 프로그램은 운영체제와 하드웨어에 관계없이 실행 가능하며 이것을 '한번 작성하면, 어디서나 실행된다(write once, run anywhere)'고 표현하기도 한다.<br>
	 *		<b>2. 객체지향언어이다.</b><br>
	 *		자바는 프로그래밍의 대세로 자리 잡은 객체지향 프로그래밍언어(object-oriented-programming languages)중의 하나로<br>
	 *		객체지향개념의 특징인 상속, 캡슐화, 다형성이 잘 적용된 순수한 객체지향 언어라는 평가를 받고있다.<br>
	 *		<b>3. 비교적 배우기 쉽다.</b><br>
	 *		자바의 연산자와 기본구문은 C++에서, 객체지향관련 구문은 스몰톡(small talk)이라는 객체지향언어에서 가져왔다.<br>
	 *		<b>4. 자동 메모리 관리(Garbage Collection)</b>
	 *		자바로 작성된 프로그램이 실행되면, 가비지컬렉터(garbage collector)가 자동적으로 메모리를 관리해주기 때문에 프로그래머는 메모리를 따로 관리 하지 않아도 된다.<br>
	 *		가비지 컬렉터가 없다면 프로그래머가 사용하지 않는 메모리를 체크하고 반환하는 일을 수동적으로 처리해야할 것이다.<br>
	 *		<b>5. 네트워크와 분산처리를 지원한다.</b><br>
	 *		<b>6. 멀티쓰레드를 지원한다.</b><br>
	 *		자바에서 개발되는 멀티쓰레드 프로그램은 시스템과는 관계없이 구현가능하며, 관련된 라이브러리(Java API)가 제공되므로 구현이 쉽다.<br>
	 *		여러 쓰레드에 대한 스케쥴링(scheduling)을 자바 인터프리터가 담당하게 된다.<br>
	 *		<b>7. 동적 로딩(Dynamic Loading)을 지원한다.</b><br>
	 *		보통 자바로 작성된 애플리케이션은 여러 개의 클래스로 구성되어있다. 자바는 동적 로딩을 지원하기 때문에 실행 시에 모든 클래스가 로딩되지 않고<br>
	 *		필요한 시점에 클래스를 로딩하여 사용할 수 있다는 장점이 있다.<br>
	 *		일부 클래스가 변경되어 전체 애플리케이션을 다시 컴파일하지 않아도 된다.<br>
	 *		<small>※자바의 단점으로는 속도문제가 가장 대표적인 것인데 바이트코드(byte code)를 하드웨어의 기계어로 바로 변환해 주는 JIT 컴파일러와</small><br>
	 *		<small>Hotspot과 같은 신기술의 도입으로 JVM의 기능이 향상됨으로써 속도문제가 상당히 개선되었다.</small>
     * </p>
     */
	class Memo02{}

    /**
	 * <p>
	 * 		<h5>1.4 JVM(Java Virtual Machine)</h5><br>
	 * 		JVM은 'Java virtual machine'을 줄인 것으로 직역하면 '자바를 실행하기 위한 가상 기계'라고 할 수 있다.<br>
	 * 		'자바를 실행하기 위한 가상 컴퓨터'라고 이해하면 좋을 것이다.<br>
	 * 		'가상 기계(virtual machine)'는 소프트웨어로 구현된 하드웨어를 뜻하는 넓은 의미의 용어<br>
	 *      자바로 작성된 애플리케이션은 모두 이 가상 컴퓨터(JVM)에서만 실행되기 때문에, 자바<br>
	 *      애플리케이션이 실행되기 위해서는 반드시 JVM이 필요하다.<br>
	 *      일반 애플리케이션의 코드는 OS만 거치고 하드웨어로 전돨되는데 비해 Java애플리케이<br>
	 *      션은 JVM을 한 번 더 거치기 때문에, 하드웨어에 맞게 완전히 컴파일된 상태가 아<br>
	 *      니고 실행 시에 해석(interpret)되기 때문에 속도가 느리다는 단점을 가지고 있다. 그러나<br>
	 *      요즘엔 바이트코드(컴파일된 자바코드)를 하드웨어의 기계어로 바로 변환해주는 JIT컴파<br>
	 *      일러와 향상된 최적화 기술이 적용되어서 속도의 격차를 많이 줄였다.<br>
	 *      JVM은 OS에 종속적이기 때문에 해당 OS에 실행가능한 JVM이 필요하다.
	 * </p>
     */
	class Memo03{}

}