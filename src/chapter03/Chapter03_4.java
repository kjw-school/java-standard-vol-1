package chapter03;

/**
 * <h1>4. 비교 연산자</h1><br>
 * 비교 연산자는 두 피연산자를 비교하는 데 사용되는 연산자다. 주로 조건문과 반복문의 조건식에 사용되며, 연산결과는 오직 true와 false 둘 중의 하나이다.<br>
 * 비교 연산자 역시 이항 연산자이므로 비교하는 피연산자의 타입이 서로 다를 경우에는 자료형의 범위가 큰 쪽으로 자동 형변환하여 피연산자의 타입을 일치시킨 후에 비교한다.
 */
public class Chapter03_4 {

	/**
	 * <h5>4.1 대소비교 연산자 < > <= >= </h5><br>
	 * 두 피연산자의 값의 크기를 비교하는 연산자이다. 참이면 true를, 거짓이면 false를 결과로 반환한다.<br>
	 * 기본형 중에서는 boolean 형을 제외한 나머지 자료형에 다 사용할 수 있지만 참조형에는 사용할 수 없다.<br>
	 * <table>
	 *     <thead>
	 *         <th>비교연산자</th>
	 *         <th>연산결과</th>
	 *     </thead>
	 *     <tbody>
	 *         <tr>
	 *             <td>></td>
	 *             <td>좌변 값이 크면, true 아니면 false</td>
	 *         </tr>
	 *         <tr>
	 *             <td><</td>
	 *             <td>좌변 값이 작으면, true 아니면 false</td>
	 *         </tr>
	 *         <tr>
	 *             <td>>=</td>
	 *             <td>좌변 값이 크거나 같으면, true 아니면 false</td>
	 *         </tr>
	 *         <tr>
	 *             <td><=</td>
	 *             <td>좌변 값이 작거나 같으면, true 아니면 false</td>
	 *         </tr>
	 *     </tbody>
	 * </table>
	 */
	class Memo1 {

	}

	/**
	 * <h5>4.2 등가비교 연산자 == !=</h5><br>
	 * 두 피연산자의 값이 같은지 또는 다른지를 비교하는 연산자이다. <br>
	 * 대소비교 연산자(<,>, <=, >=)와는 달리, 기본형은 물론 참조형, 즉 모든 자료형에 사용할 수 있다.<br>
	 * 기본형의 경우 변수에 저장되어 있는 값이 같은지를 알 수 있고, 참조형의 경우 객체의 주소값을 저장하기 때문에 두 개의 피연산자(참조변수)가 같은 객체를 가리키고 있는지를 알 수 있다.<br>
	 * 기본형과 참조형은 서로 형변환이 가능하지 않기 때문에 등가비교 연산자(==, !=)로 기본형과 참조형을 비교할 수 없다.<br>
	 * <table>
	 *     <thead>
	 *         <th>비교연산자</th>
	 *         <th>연산결과</th>
	 *     </thead>
	 *     <tbody>
	 *         <tr>
	 *             <td>==</td>
	 *             <td>두 값이 같으면, true 아니면 false</td>
	 *         </tr>
	 *         <tr>
	 *             <td>!=</td>
	 *             <td>두 값이 다르면, true 아니면 false</td>
	 *         </tr>
	 *     </tbody>
	 * </table>
	 * <br>
	 * '='는 이미 배운 것과 같이 변수에 값을 저장할 때 사용하는 '대입연산자'이기 때문에 '=='로 두 값이 같은지 비교하는 연산자를 표현한다.<br>
	 * 비교 연산자도 이항 연산자이므로 연산을 수행하기 전에 형변환을 통해 두 피연산자의 타입을 같게 맞춘 다음 피연산자를 비교한다.
	 */
	class Memo2 {

	}

	/**
	 * <h5>문자열의 비교</h5>
	 */
	class Memo3 {

	}

}
