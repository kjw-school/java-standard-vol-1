package chapter03;

/**
 * <h1>2. 단항 연산자</h1>
 */
public class Chapter03_2 {

	/**
	 * <h5>2.1 증감 연산자 ++ --</h5><br>
	 * 증감연산자의 피연산자로 정수와 실수가 모두 가능하지만, 상수는 값을 변경할 수 없으므로 가능하지 않다.<br>
	 * 대부분의 연산자는 피연산자의 값을 읽어서 연산에 사용할 뿐, 피연산자의 타입이나 값을 변경시키지 않는다.<br>
	 * 오직 대입연산자의 증감연산자만 피연산자의 값을 변경한다.<br>
	 * <small>※ 증감연산자는 일반 산술 변환에 의한 자동 형변환이 발생하지 않으며, 연산결과의 타입은 피연산자의 타입과 같다.</small><br>
	 * <pre><code>
	 *     증가 연산자(++): 피연산자의 값을 1 증가시킨다.
	 *     감소 연산자(--): 피연산자의 값을 1 감소시킨다.
	 * </code></pre>
	 * <br>
	 * 피연산자의 왼쪽에 위치하면 '전위형(prefix)', 오른쪽에 위치하면 '후위형(postfix)'이라고 한다.<br>
	 * <table border="1">
	 *     <thead>
	 *         <th>타입</th>
	 *         <th>설명</th>
	 *         <th>사용예</th>
	 *     </thead>
	 *     <tbody>
	 *         <tr>
	 *             <td>전위형</td>
	 *             <td>값이 참조되기 전에 증가시킨다.</td>
	 *             <td>j = ++i;</td>
	 *         </tr>
	 *         <tr>
	 *             <td>후위형</td>
	 *             <td>값이 참조된 후에 증가시킨다.</td>
	 *             <td>j = i++;</td>
	 *         </tr>
	 *     </tbody>
	 * </table>
	 * <br>
	 * 수식이나 메서드 호출에 포함되지 않고 독립적인 하나의 문장으로 쓰인 경우에는 전위형과 후위형의 차이가 없다.<br>
	 * 전위형 'j=++i'에서는 i의 값을 증가시킨 후에 읽어오므로 i의 값이 5에서 6으로 증가된 후에 이 값이 j에 저장되며,<br>
	 * 후위형 'j=i++'에서는 i값인 5를 먼저 읽어온 다음에 i를 증가시키니까 j에 5가 저장된다.<br>
	 * j = ++i; // 전위형 -> ++i; // 증가후에 j = i; // 참조하여 대입<br>
	 * j = i++; // 후위형 -> j = i; // 참조하여 대입 후에 i++; // 증가<br>
	 * 식에 두 번 이상 포함된 변수에 증감연산자를 사용하는 것은 피해야 한다.
	 */
	class Memo1 {

	}

	/**
	 * <h5>2.2 부호 연산자 + -</h5><br>
	 * 부호 연산자 '-'는 피연산자의 부호를 반대로 변경한 결과를 반환한다.<br>
	 * 부호 연산자'+'는 하는 일이 없으며, 쓰이는 경우도 거의 없다. 부호연산자'-'가 있으니까 형식적으로 '+'를 추가해 놓은 것뿐이다.<br>
	 * 부호 연산자는 boolean형과 char형을 제외한 기본형에만 사용할 수 있다.<br>
	 * <small>※ 부호연산자는 덧셈, 뺄셈연산자와 같은 기호를 쓰지만 다른 연산자이다. 기호는 같아도 피연산자의 개수가 달라서 구별이 가능하다.</small>
	 */
	class Memo2 {

	}

}
